/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package lab4;

import java.awt.Component;
import java.awt.List;
import java.awt.event.ActionListener;
import java.io.File;
import java.io.Serializable;
import java.nio.file.Path;
import javax.swing.*;
import javax.swing.event.ListDataListener;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.filechooser.FileSystemView;
import javax.xml.bind.Marshaller.Listener;

/**
 *
 * @author Greg Clark <gclark7@my.wctc.edu>
 */
public class GUI_FileManager extends javax.swing.JFrame implements Serializable{

    private FileManager fm;
    private String strRootPath;
    private ListSelectionListener valueChanged;
    /**
     * Creates new form GUI_FileManager
     */
    public GUI_FileManager() {
        initComponents();
        fm=Factory_InitialConfig.getDefaultFileManager();
        fm.setFile("src");
        strRootPath="src";
         File[] f = fm.getFile().listFiles();
         
         //Current rootDirectory
         txtDirectory.setText(strRootPath);
         //populate initial list data
        populateLstFiles(f);
        populateLstDirectories(f);
        
        
        // TODO add your handling code here:
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnSetPath = new javax.swing.JButton();
        txtFile = new javax.swing.JTextField();
        btnBrowsePath = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstFiles = new javax.swing.JList();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        lstDirectories = new javax.swing.JList();
        txtDirectory = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("File Manager");

        btnSetPath.setText("Set Path");

        txtFile.setEditable(false);
        txtFile.setToolTipText("Select a File to Change");

        btnBrowsePath.setText("Browse Path");
        btnBrowsePath.setToolTipText("");
        btnBrowsePath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrowsePathActionPerformed(evt);
            }
        });

        lstFiles.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstFiles.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_INTERVAL_SELECTION);
        jScrollPane1.setViewportView(lstFiles);

        jLabel1.setText("Files Available");

        lstDirectories.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstDirectories.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane2.setViewportView(lstDirectories);

        txtDirectory.setEditable(false);
        txtDirectory.setToolTipText("Click Browse Path to Change");
        txtDirectory.setName(""); // NOI18N
        txtDirectory.setOpaque(false);

        jLabel2.setText("Directories Available");
        jLabel2.setToolTipText("");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnSetPath))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBrowsePath)
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addGap(0, 153, Short.MAX_VALUE))))
                            .addComponent(txtDirectory))
                        .addGap(10, 10, 10)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 242, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(36, 36, 36))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnBrowsePath)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addGroup(layout.createSequentialGroup()
                            .addGap(20, 20, 20)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtFile, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtDirectory, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnSetPath)
                .addContainerGap(166, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBrowsePathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrowsePathActionPerformed
        browseForFiles("");
        
    }//GEN-LAST:event_btnBrowsePathActionPerformed
    
    private void browseForFiles(String addedDir){
        JFileChooser fc=null;
        int returnVal=0;
        
            fc=new JFileChooser(strRootPath + File.separatorChar + addedDir);
       
        returnVal=fc.showOpenDialog(null);
        
        
        if (returnVal == JFileChooser.APPROVE_OPTION) {
            txtFile.setText(fc.getSelectedFile().getName());
            populateLstFiles(fc.getCurrentDirectory().listFiles());
            populateLstDirectories(fc.getCurrentDirectory().listFiles());
            setStrRootPath(fc.getCurrentDirectory().getPath());
         }
    }
    
    private void populateLstDirectories(File[] f){
        String[] s=new String[f.length];
        DefaultListModel list = new DefaultListModel();  //ListModel list = new JList(f);//=f;
        
        for(int i=0;i<f.length;i++){
            if(f[i].isDirectory()){
            s[i]=f[i].getName();
            //list.addElement(f[i]);//workded
            list.addElement(s[i]);
            } 
        }
        
        //may not want to give the list an item??
        if(list.isEmpty()){
        
//            System.out.println("DirectoryListEmpty");
            list.addElement(" ");
        }
       
        
//         lstDirectories.removeListSelectionListener(null);//removes the anonymous listener...didn't work
        lstDirectories.removeListSelectionListener(valueChanged);
         lstDirectories.setModel(list);
//         lstDirectories.setSelectedIndex(0);
//          if(!lstDirectories.isSelectionEmpty()){
         
                lstDirectories.addListSelectionListener(valueChanged =new ListSelectionListener(){
                @Override
                public void valueChanged(ListSelectionEvent evt) { 
                    //testing
//                    if(lstDirectories.isSelectionEmpty()){
//                        System.out.println("selection Empty");
//                    }
                    String addedDir="";
                    if(!CustomErrorHandling.isNull_Empty(strRootPath) && !lstDirectories.isSelectionEmpty()){
                        addedDir=lstDirectories.getSelectedValue().toString();
                        txtDirectory.setText(addedDir);
                    }
                    browseForFiles(addedDir);
                }
            });
//          }
        
        lstDirectories.repaint();
    }
    
    private void populateLstFiles(File[] f){
         //if(evt.getActionCommand()==)
//        JOptionPane.showMessageDialog(null,evt);
//        System.out.println(evt.getActionCommand());
//        txtPath.setText("My event was " + evt.toString());
        
       
        String[] s=new String[f.length];
//        JList list=new JList(f.length,false);
//        JList list=new JList(f);
        DefaultListModel list = new DefaultListModel();
       
        //ListModel list = new JList(f);//=f;
        
        for(int i=0;i<f.length;i++){
//            list.add(f[i]);
//            list.
            //f[i];
//            lstFiles.add(f[i]);
//            lstFiles.setListData(f[i].toString());
            
            //s[i]=f[i].toString();//worked!!
            if(f[i].isFile()){
            s[i]=f[i].getName();
            //list.addElement(f[i]);//workded
            list.addElement(s[i]);
            }
//            list.addListDataListener(new ListDataListener(){
//                private void contentsChanged(java.awt.event.ActionEvent evt) { 
//                    txtPath.setText(lstFiles.getSelectedValue().toString());
//                }
//            });//don't need a listener here...I'm not trying to add items later
        }
        //Never worked
//        if(CustomErrorHandling.isNull_Empty(list)){
//            list.addElement(" ");
//        }
//        lstFiles.setListData(s);//null pointer issues
        //lstFiles.add(this, fm.getFile().listFiles(), -1);
//        lstFiles.setModel((ListModel)list);
        
         lstFiles.removeListSelectionListener(null);//removes the anonymous listener
          lstFiles.setModel(list);
          //lstFiles.addListSelectionListener(null);
          lstFiles.addListSelectionListener(new ListSelectionListener(){
                @Override
                public void valueChanged(ListSelectionEvent evt) { 
                    if(!CustomErrorHandling.isNull_Empty(lstFiles.getSelectedValue())){
                        txtFile.setText(lstFiles.getSelectedValue().toString());
                    }
                }
            });
          
        
////         lstFiles.setModel("yo");
//        lstFiles.add(list, rootPane, -1);
//        lstFiles[2].toString();
        
        lstFiles.repaint();
    }
    
    private void setStrRootPath(String s){
        if(CustomErrorHandling.isNull_Empty(s)){
            strRootPath="";
        }else{strRootPath=s;}
        txtDirectory.setText(strRootPath);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GUI_FileManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GUI_FileManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GUI_FileManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GUI_FileManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GUI_FileManager().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBrowsePath;
    private javax.swing.JButton btnSetPath;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JList lstDirectories;
    private javax.swing.JList lstFiles;
    private javax.swing.JTextField txtDirectory;
    private javax.swing.JTextField txtFile;
    // End of variables declaration//GEN-END:variables
}
